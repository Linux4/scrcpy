From 9543ade3ca0f8e2354eef8446cd47cd52802cde5 Mon Sep 17 00:00:00 2001
From: yangfl <yangfl@users.noreply.github.com>
Date: Thu, 16 Jan 2020 02:47:34 +0800
Subject: [PATCH] Show a friendly hint for adb installation

---
 app/src/command.c          | 20 ++++++++++++++++++++
 app/src/command.h          |  3 +++
 app/src/sys/unix/command.c | 37 +++++++++++++++++++++++++++++++++++++
 app/src/sys/win/command.c  |  6 ++++++
 4 files changed, 66 insertions(+)

diff --git a/app/src/command.c b/app/src/command.c
index 63afccb..b7ccdf5 100644
--- a/app/src/command.c
+++ b/app/src/command.c
@@ -58,6 +58,25 @@ argv_to_string(const char *const *argv, char *buf, size_t bufsize) {
     return idx;
 }
 
+static void
+show_adb_installation_msg() {
+    const char *const pkg_managers[][2] = {
+        {"dnf", "dnf install android-tools"},
+        {"brew", "brew install android-platform-tools"},
+        {"apt", "apt install adb"},
+        {"apt-get", "apt-get install adb"}
+    };
+    for (int i = 0; i < sizeof(pkg_managers) / sizeof(pkg_managers[0]); i++) {
+        if (cmd_search(pkg_managers[i][0])) {
+            LOGI("You may install 'adb' by \"%s\"", pkg_managers[i][1]);
+            return;
+        }
+    }
+
+    LOGI("You may download and install 'adb' from "
+        "https://developer.android.com/studio/releases/platform-tools");
+}
+
 static void
 show_adb_err_msg(enum process_result err, const char *const argv[]) {
     char buf[512];
@@ -71,6 +90,7 @@ show_adb_err_msg(enum process_result err, const char *const argv[]) {
             LOGE("Command not found: %s", buf);
             LOGE("(make 'adb' accessible from your PATH or define its full"
                  "path in the ADB environment variable)");
+            show_adb_installation_msg();
             break;
         case PROCESS_SUCCESS:
             // do nothing
diff --git a/app/src/command.h b/app/src/command.h
index 9fc81c1..12603a5 100644
--- a/app/src/command.h
+++ b/app/src/command.h
@@ -43,6 +43,9 @@ enum process_result {
     PROCESS_ERROR_MISSING_BINARY,
 };
 
+bool
+cmd_search(const char *file);
+
 enum process_result
 cmd_execute(const char *const argv[], process_t *process);
 
diff --git a/app/src/sys/unix/command.c b/app/src/sys/unix/command.c
index fbcf235..8d92ff3 100644
--- a/app/src/sys/unix/command.c
+++ b/app/src/sys/unix/command.c
@@ -14,12 +14,49 @@
 #include <limits.h>
 #include <signal.h>
 #include <stdlib.h>
+#include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <unistd.h>
 
 #include "util/log.h"
 
+bool
+cmd_search(const char *file) {
+    char *path = getenv("PATH");
+    if (!path)
+        return false;
+    path = strdup(path);
+    if (!path)
+        return false;
+
+    bool ret = false;
+    size_t file_len = strlen(file);
+    char *saveptr;
+    for (char *dir = strtok_r(path, ":", &saveptr); dir;
+            dir = strtok_r(NULL, ":", &saveptr)) {
+        size_t dir_len = strlen(dir);
+        char *fullpath = malloc(dir_len + file_len + 2);
+        if (!fullpath)
+            continue;
+        memcpy(fullpath, dir, dir_len);
+        fullpath[dir_len] = '/';
+        memcpy(fullpath + dir_len + 1, file, file_len + 1);
+
+        struct stat sb;
+        bool fullpath_executable = stat(fullpath, &sb) == 0 &&
+            sb.st_mode & S_IXUSR;
+        free(fullpath);
+        if (fullpath_executable) {
+            ret = true;
+            break;
+        }
+    }
+
+    free(path);
+    return ret;
+}
+
 enum process_result
 cmd_execute(const char *const argv[], pid_t *pid) {
     int fd[2];
diff --git a/app/src/sys/win/command.c b/app/src/sys/win/command.c
index 55edaf8..ae66355 100644
--- a/app/src/sys/win/command.c
+++ b/app/src/sys/win/command.c
@@ -4,6 +4,12 @@
 #include "util/log.h"
 #include "util/str_util.h"
 
+bool
+cmd_search(const char *file) {
+    // :/
+    return false;
+}
+
 static int
 build_cmd(char *cmd, size_t len, const char *const argv[]) {
     // Windows command-line parsing is WTF:
-- 
2.24.1

